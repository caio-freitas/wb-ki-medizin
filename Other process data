import biosppy as bp
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import scipy.io
from biosppy.signals import ecg 



import biosppy as bp
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import scipy.io
from biosppy.signals import ecg 


def load_electrograms():
#must be in the same folder
    ecg = [0]*6000
    for i in range(6000):
        f=scipy.io.loadmat('train_ecg_'+str('{0:05}'.format(i+1))+'.mat')['val']
        mat[i]=np.array(f)
        mat[i]=mat[i].flatten()
    return(ecg)


def load_reference():
#must be in the same folder 
    reference=pd.read_csv('REFERENCE.csv')
    Normal = reference.index[reference[" letra"].str.contains("N").tolist()]
    Other  = reference.index[reference[" letra"].str.contains("O").tolist()]
    Noise  = reference.index[reference[" letra"].str.contains("~").tolist()]
    AF     = reference.index[reference[" letra"].str.contains("A").tolist()]

    return Normal, Other, Noise, AF, reference


def procesar_ecg(ecg):
 #intruduce the ecg
    #devuelve ts, filtered, rpeaks, templates_ts, templates, heart_rate_ts, heart_rate
    
    ts =[0]*6000
    filtered=[0]*6000
    rpeaks=[0]*6000
    templates_ts=[0]*6000
    templates=[0]*6000
    heart_rate_ts=[0]*6000
    heart_rate=[0]*6000
    for i in range(6000):
        ts[i], filtered[i], rpeaks[i], templates_ts[i],templates[i], heart_rate_ts[i], heart_rate[i] = ecg.ecg(signal=ecg[i], sampling_rate=300., show= False)
    
    return ts, filtered, rpeaks, templates_ts, templates, heart_rate_ts, heart_rate

def heart_rate_processing(index,  heart_rate):
    #introduce vector with the heart: heart_rate
    #introducir vector with the index you want process: Normal, AF,Noise, Other
    
    #return to vector, one with the averages and the other with the standard deviation
    average_heart_rate=np.zeros(np.size(Normal))
    std_heart_rate=np.zeros(np.size(Normal))

    k=0

    for i in index:
        a=np.zeros(np.size(heart_rate[i]))
        a=heart_rate[i]
    
        average_heart_rate[k]=np.mean(a)
        std_heart_rate[k]=np.std(a)
        k=k+1
    return average_heart_rate, std_heart_rate



def diferencia_templates(templates, index):
   #introduce templates 
   #return de standard deviation between templates
    
    desviacion_templates= np.zeros(np.size(index))
    m=0
    
    
    for l in index:
        y=0
        z=0


        a = np.shape(templates[l])
        y=0
        for k in range(a[0]-1):
           for j in range(k+1, a[0]):
                for i in range(a[1]):
                    y = y + (templates[l][k][i]-templates[l][j][i])**2
                    z=z+1
        desviacion_templates[m]= y/(z-1)
        m=m+1
    
    return desviacion_templates
